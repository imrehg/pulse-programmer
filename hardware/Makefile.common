#-*-Makefile-*-
# Makefile for gEDA/PCB hardware designs

###############################################################################
# Configurable Targets
help:
	@echo
	@echo "The following targets are available"
	@echo
	@echo "  make [help]  prints this message."
	@echo "  make sch     opens main schematic sheet for editing"
	@echo "  make drc     runs schematic design rule check"
	@echo "  make net     generates netlist from .sch files"
	@echo "  make pcb     generates initial PCB layout from *.sch file"
	@echo "  make layout  opens PCB layout for editing with layer colors"
	@echo "  make gerber  generates Gerber CAM output from *.pcb file"
	@echo "  make fab     generates zip file of Gerbers for fabrication"
	@echo "  make asm     generates zip file of drawings/BOM for assembly"
	@echo "  make pcbpdf  generates zip file of all PCB drawings in PDF"
	@echo "  make ps      generates Postscript layer plots"
	@echo "  make pdf     generates PDF layer plots"
	@echo "  make schpdf  generates Postscript from schematic sheets"
	@echo
	@echo "The following variable modifiers are available:"
	@echo
	@echo $(HELP_LOCAL)
	@echo

clean:
	rm -rf *.log *.drc *.tgt *~ *.log *.stackdump PCB.*
	rm -rf *.zip $(TARGETS_BOM)
	rm -rf $(FAB_ZIP) $(FAB_ZIP).md5
	rm -rf $(ASM_ZIP) $(ASM_ZIP).md5
	rm -rf $(SCH_ZIP) $(SCH_ZIP).md5
	rm -rf $(PCB_ZIP) $(PCB_ZIP).md5
	rm -rf $(FAB_DIR) $(ASM_DIR) $(SCH_DIR) $(PCB_DIR)
	rm -rf *.pcb.bak* *.pcb- *.cmd *.net $(BOARD)-$(REV)

ifndef GROOT
$(error 'Define GROOT to the path such that \$GROOT/bin contains gEDA binaries.')
endif

TOP_SRC_DIR = ~/sf/svnroot/hardware
GBIN = $(GROOT)/bin
GSCM_DIR = $(GROOT)/share/gEDA/scheme
GSCHEM = $(GBIN)/gschem 
GNET = $(GBIN)/gnetlist -q
G2PCB = gsch2pcb --use-files
PCB = $(GBIN)/pcb
GBR = $(PCB) -x gerber --verbose --gerberfile $(GBR_PRE)
GBR_PRE = $(FAB_DIR)/$(BOARD)-$(REV)
PS_PRE = $(PCB_DIR)/$(BOARD)-$(REV)
GSCHEMRC = gschemrc
GAFRC = gafrc
GNETLISTRC = gnetlistrc
RC_FILES = $(GSCHEMRC) $(GAFRC) $(GNETLISTRC)

SCHEM_FILES += $(BOARD).sch
SVNROOT = https://pulse-sequencer.svn.sf.net/svnroot/pulse-sequencer
TARGETS_NET = $(BOARD).net
TARGETS_DRC = $(BOARD).drc
TARGETS_PCB = $(BOARD).pcb
TARGETS_PCBPDF = $(TARGETS_PS:.ps=.pdf)
TARGETS_SCHPS = $(foreach file, $(SCHEM_FILES:.sch=.ps), $(SCH_DIR)/$(file))
TARGETS_SCHPDF = $(TARGETS_SCHPS:.ps=.pdf)

TARGETS_FRONT = \
	back \
	backmask \
	front \
	frontmask \
	frontpaste \
	frontsilk \
	outline \
	fab \

TARGETS_BACK = \
	backpaste \
	backsilk \

TARGETS_PLATED = \
	plated-drill \

TARGETS_UNPLATED = \
	unplated-drill \

# Inner planes for high-speed boards are always layer groups 4 and 5.
TARGETS_HS = \
	group3 \
	group4 \

GBR_FILES_FRONT = \
	$(foreach file, $(TARGETS_FRONT), $(GBR_PRE).$(file).gbr) \
	$(foreach file, $(TARGETS_PLATED), $(GBR_PRE).$(file).cnc) \

GBR_FILES_BACK = \
	$(foreach file, $(TARGETS_BACK), $(GBR_PRE).$(file).gbr) \

GBR_FILES_UNPLATED = \
	$(foreach file, $(TARGETS_UNPLATED), $(GBR_PRE).$(file).cnc) \

GBR_FILES_PLATED = $(GBR_FILES_FRONT) $(GBR_FILES_BACK)

GBR_FILES = $(GBR_FILES_PLATED) $(GBR_FILES_UNPLATED)

TARGETS_ASSEMBLY_FRONT = \
	frontassembly \

TARGETS_ASSEMBLY_BACK = \
	backassembly \

PS_FILES_FRONT = \
	$(foreach file, $(TARGETS_FRONT), $(PS_PRE).$(file).ps) \
	$(foreach file, $(TARGETS_PLATED), $(PS_PRE).$(file).ps) \
	$(foreach file, $(TARGETS_ASSEMBLY_FRONT), $(PS_PRE).$(file).ps) \

PS_FILES_UNPLATED = \
	$(foreach file, $(TARGETS_UNPLATED), $(PS_PRE).$(file).ps) \

PS_FILES_BACK = \
	$(foreach file, $(TARGETS_BACK), $(PS_PRE).$(file).ps) \
	$(foreach file, $(TARGETS_ASSEMBLY_BACK), $(PS_PRE).$(file).ps) \

PS_FILES_PLATED = $(PS_FILES_FRONT) $(PS_FILES_BACK)

PS_FILES = $(PS_FILES_PLATED) $(PS_FILES_UNPLATED)

PDF_FILES = $(PS_FILES:.ps=.pdf)
TARGETS_PDF = $(TARGETS_PS:.ps=.pdf)

# High-speed boards need power/ground inner planes
GERBER_FILES_HS = \
	$(foreach file, $(TARGETS_HS), $(GBR_PRE).$(file).gbr) \

PS_FILES_HS = \
	$(foreach file, $(TARGETS_HS), $(PS_PRE).$(file).ps) \

FAB_ZIP = $(BOARD)-$(REV)-fab.zip
ASM_ZIP = $(BOARD)-$(REV)-asm.zip
SCH_ZIP = $(BOARD)-$(REV)-sch.zip
PCB_ZIP = $(BOARD)-$(REV)-pcb.zip
FAB_DIR = $(BOARD)-$(REV)-fab
ASM_DIR = $(BOARD)-$(REV)-asm
SCH_DIR = $(BOARD)-$(REV)-sch
PCB_DIR = $(BOARD)-$(REV)-pcb

TARGETS_BOM = $(BOARD)-$(REV).bom $(BOARD)-$(REV).xy

$(SCH_DIR)/%.ps: %.sch
	$(GSCHEM) -p -o $@ -s ../scripts/print.scm $<

%.pdf: %.ps
	ps2pdf $< $@

$(BOARD).net: $(SCHEM_FILES)
	$(GNET) -g PCB -o $@ $(BOARD).sch

$(BOARD).drc: $(SCHEM_FILES)
	$(GNET) -g drc2 -o $@ $(BOARD).sch

$(BOARD).pcb: $(BOARD).prj $(SCHEM_FILES)
	$(G2PCB) $<
	touch $@ # If no new elements are added, touch to update timestamp

%.zip.md5: %.zip
	md5sum $< >> $@

%.bz2.md5: %.bz2
	md5sum $< >> $@

$(TARGETS_BOM): $(BOARD).pcb
	$(PCB) -x bom --bomfile $(BOARD)-$(REV).bom --xyfile $(BOARD)-$(REV).xy \
		$<

$(FAB_DIR):
	mkdir -p $@

$(SCH_DIR):
	mkdir -p $@

$(PCB_DIR):
	mkdir -p $@

$(TARGETS_GERBER): $(BOARD).pcb $(FAB_DIR)
	$(GBR) $<

$(SCH_ZIP): $(TARGETS_SCHPDF)
	zip -r $(SCH_ZIP) $(SCH_DIR)

$(PCB_ZIP): $(TARGETS_PCBPDF)
	zip -r $(PCB_ZIP) $(PCB_DIR)

$(FAB_ZIP): $(TARGETS_GERBER)
	zip -r $(FAB_ZIP) $(FAB_DIR)

$(ASM_ZIP): $(TARGETS_BOM) $(TARGETS_PDF)
	mkdir -p $(ASM_DIR)
	cp $(TARGETS_BOM) $(ASM_DIR)/
	cp $(PS_PRE).*assembly.pdf $(ASM_DIR)/
	zip -r $(ASM_ZIP) $(ASM_DIR)

$(BOARD)-$(REV).bz2:
	svn export $(SVNROOT)/hardware $(BOARD)-$(REV)
	tar cvf - $(BOARD)-$(REV) | bzip2 > $@

$(BOARD)-$(REV).zip:
	svn export $(SVNROOT)/hardware $(BOARD)-$(REV)
	zip -r $@ $(BOARD)-$(REV)

$(TARGETS_SCHPDF): $(SCH_DIR)
$(TARGETS_PCBPDF): $(PCB_DIR)

$(TARGETS_PS): $(BOARD).pcb $(PCB_DIR)
	$(PCB) -x ps --psfile $(PS_PRE) --align-marks --outline --ps-color --media Letter --scale 1.0 --multi-file $<

$(GSCHEMRC): ../geda-dotfiles/$(GSCHEMRC)
	ln -s $< $@

$(GAFRC): ../geda-dotfiles/$(GAFRC)
	ln -s $< $@

$(GNETLISTRC): ../geda-dotfiles/$(GNETLISTRC)
	ln -s $< $@

drc: $(RC_FILES) $(TARGETS_DRC)
pcb: $(RC_FILES) $(TARGETS_PCB) net
net: $(RC_FILES) $(TARGETS_NET)
gerber: $(RC_FILES) $(TARGETS_GERBER)
fab: $(RC_FILES) $(FAB_ZIP) $(FAB_ZIP).md5
asm: $(RC_FILES) $(ASM_ZIP) $(ASM_ZIP).md5
schpdf: $(RC_FILES) $(SCH_ZIP) $(SCH_ZIP).md5
pcbpdf: $(RC_FILES) $(PCB_ZIP) $(PCB_ZIP).md5
sch: $(GSCHEMRC) $(GAFRC)
	$(GSCHEM) $(BOARD).sch
layout: $(RC_FILES)
	$(PCB) $(LAYER_COLORS) $(BOARD).pcb
ps: $(RC_FILES) $(TARGETS_PS)
pdf: $(RC_FILES) $(TARGETS_PDF)
bom: $(RC_FILES) $(TARGETS_BOM)
tag:
	svn cp -m "Tagging of $(BOARD) revision $(REV)."\
		$(SVNROOT)/hardware/$(BOARD) $(SVNROOT)/tags/$(BOARD)-$(REV)
untag:
	svn rm -m "Undo tagging of $(BOARD) revision $(REV)."\
		$(SVNROOT)/tags/$(BOARD)-$(REV)
export: $(BOARD)-$(REV).bz2 $(BOARD)-$(REV).bz2.md5

