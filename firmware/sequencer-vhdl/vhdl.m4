divert(-1)dnl
###############################################################################
# Macros for VHDL modules
###############################################################################
# MIT-NIST-ARDA Pulse Sequencer
# http://qubit.media.mit.edu/sequencer
# Paul Pham
# MIT Center for Bits and Atoms
###############################################################################

define([ --- ], [ dnl ])
  
###############################################################################
# Generated file warning

define([generated_warning_], [dnl
-------------------------------------------------------------------------------
-- This file is generated by macros using the GNU m4 macro processor.
-- Do not edit or version this file.
-- Edit the source file $1.m4 extension instead.
-------------------------------------------------------------------------------
])

###############################################################################
# Entity/component declaration
#   $1 = name of VHDL entity/component
#   $2 = libraries
#   $3 = generics
#   $4 = ports
#   $5 = [component] if declaring a component
#        [entity]    if declaring an entity

define([declaration_], [dnl
ifelse([entity], $5,
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
$2
-------------------------------------------------------------------------------
entity $1 is,
component $1)

  generic (
$3
    UNUSED_GENERIC      : boolean := false
    );

  port (
$4
    unused_port         : in    std_logic := '0'
    );

ifelse([entity], $5, [dnl
end $1;], [dnl
end component;])
])

###############################################################################
# VHDL entity
#   $1 = name of VHDL entity
#   $2 = libraries
#   $3 = generics
#   $4 = ports

define([entity_], [dnl
generated_warning_($1)
declaration_([$1], [$2], [$3], [$4], [entity])])

###############################################################################
# VHDL component
#   $1 = name of VHDL entity
#   $2 = libraries
#   $3 = generics
#   $4 = ports

define([component_], [dnl
declaration_([$1], [$2], [$3], [$4], [component])])

###############################################################################
# Define both the entity and component declaration
#   $1 = name of VHDL entity/component
#   $2 = libraries
#   $3 = generics
#   $4 = ports

define([declare_],
[define([$1][_entity_], entity_([$1], [$2], [$3], [$4]))]
[define([$1][_component_], component_([$1], [$2], [$3], [$4]))]
)

###############################################################################
# Instantiate an architecture
#  $1 = design unit name
#  $2 = libraries
#  $3 = declarations (constants, subtypes, signals)
#  $4 = body

define([architecture_], [dnl
library ieee;
use ieee.std_logic_1164.all;
$2
-------------------------------------------------------------------------------
architecture behaviour of $1 is
$3
begin
$4
end behaviour;])

###############################################################################
# Instantiate a design unit (entity/architecture pair)
#   $1 = design unit name
#   $2 = libraries
#   $3 = generics
#   $4 = ports
#   $5 = declarations
#   $6 = body
define([unit_],
[declare_([$1], [$2], [$3], [$4])]
$1[_entity_]

[architecture_($1, $2, [$5], [$6])])

# Renable output for processed file
divert(0)dnl
